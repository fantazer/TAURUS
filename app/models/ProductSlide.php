<?php

namespace app\models;

use app\behaviors\ActiveRecord\ImageUploadBehavior;
use app\helpers\ProductSlideHelper;

/**
 * This is the model class for table "product_slide".
 *
 * @property integer $id
 * @property string $file
 * @property integer $product_id
 *
 * @property Product $product
 */
class ProductSlide extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'product_slide';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['product_id'], 'required'],
            [['product_id'], 'integer'],
            [['file'], 'file', 'extensions' => 'jpg, png, jpeg, gif', 'on' => ['create', 'update']],
            [['product_id'], 'exist', 'skipOnError' => true, 'targetClass' => Product::className(), 'targetAttribute' => ['product_id' => 'id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => ImageUploadBehavior::className(),
                'modelFileAttrName' => 'file',
                'fileDir' => \Yii::getAlias('@webroot/img/product/'),
                'imageWidth' => 640,
                'imageHeight' => 411,
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'file' => 'Изображение',
            'product_id' => 'Продукт',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProduct()
    {
        return $this->hasOne(Product::className(), ['id' => 'product_id'])->inverseOf('productSlides');
    }

    public function beforeDelete()
    {
        if (file_exists(ProductSlideHelper::getProductSlideAbsolutePath($this))) {
            try {
                unlink(ProductSlideHelper::getProductSlideAbsolutePath($this));
            } catch(\Exception $e) {

            }
        }

        return parent::beforeDelete();
    }

    public function beforeSave($insert)
    {
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
}
